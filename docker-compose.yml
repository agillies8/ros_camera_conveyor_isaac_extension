services:
  # main ros service that runs the kicker ros package
  isaac_cam_conveyor:
    #image: agillies/ros2-cam-base
    build:
      context: .  # The directory containing the Dockerfile
      dockerfile: Dockerfile  # Optional: defaults to "Dockerfile" in the context directory
    # Interactive shell
    stdin_open: true
    tty: true
    # Networking and IPC for ROS 2
    # network_mode: host
    # ipc: host
    #Needed to display graphical applications
    privileged: true
    container_name: isaac_cam_conveyor  # Set custom container name
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      # Allows graphical programs in the container.
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1
      - NVIDIA_DRIVER_CAPABILITIES=all
    volumes:
      # Adds this as a ros package to ros2 workspace
      - .:/ros2_ws/src/isaac_cam_conveyor
      - ~/yolo_ros/yolo_msgs:/ros2_ws/src/yolo_msgs
      # Allows graphical programs in the container.
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ${XAUTHORITY:-$HOME/.Xauthority}:/root/.Xauthority
      # Add rosbag directory
      - ~/rosbags:/rosbags
    # working_dir: /ros2_ws
    command: >
      /bin/bash -c "
      colcon build &&
      source /opt/ros/humble/setup.bash &&
      source /ros2_ws/install/setup.bash && 
      ros2 launch isaac_cam_conveyor kicker_controller.launch.py
      "
#the following 3 services all spin up a yolo ros node that each processes one of the 3 cam feeds
  kicker_yolo_ros:
    container_name: yolo_ros  # Set custom container name
    image: yolo_ros
    # Interactive shell
    stdin_open: true
    tty: true
    #network_mode: host
    privileged: true
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    volumes:
      #Add rosbag directory
      - ~/rosbags:/rosbags
      - ./models:/root/ros2_ws/src/models
      #Allows graphical programs in the container.
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ${XAUTHORITY:-$HOME/.Xauthority}:/root/.Xauthority
    command: >
      /bin/bash -c "
      colcon build &&
      source /opt/ros/humble/setup.bash &&
      source install/setup.bash &&
      ros2 launch yolo_bringup yolo.launch.py model:=src/models/best640.pt input_image_topic:=/camera/rgb threshold:=0.7 imgsz_height:=480 namespace:=kicker
      "

  kicker_1_yolo_ros:
    container_name: yolo_ros_1  # Set custom container name
    image: yolo_ros
    # Interactive shell
    stdin_open: true
    tty: true
    #network_mode: host
    privileged: true
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    volumes:
      #Add rosbag directory
      - ~/rosbags:/rosbags
      - ./models:/root/ros2_ws/src/models
      #Allows graphical programs in the container.
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ${XAUTHORITY:-$HOME/.Xauthority}:/root/.Xauthority
    command: >
      /bin/bash -c "
      colcon build &&
      source /opt/ros/humble/setup.bash &&
      source install/setup.bash &&
      ros2 launch yolo_bringup yolo.launch.py model:=src/models/best640.pt input_image_topic:=/camera_01/rgb threshold:=0.7 imgsz_height:=480 namespace:=kicker_01
      "

  kicker_2_yolo_ros:
    container_name: yolo_ros_2  # Set custom container name
    image: yolo_ros
    # Interactive shell
    stdin_open: true
    tty: true
    #network_mode: host
    privileged: true
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    volumes:
      #Add rosbag directory
      - ~/rosbags:/rosbags
      - ./models:/root/ros2_ws/src/models
      #Allows graphical programs in the container.
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ${XAUTHORITY:-$HOME/.Xauthority}:/root/.Xauthority
    command: >
      /bin/bash -c "
      colcon build &&
      source /opt/ros/humble/setup.bash &&
      source install/setup.bash &&
      ros2 launch yolo_bringup yolo.launch.py model:=src/models/best640.pt input_image_topic:=/camera_02/rgb threshold:=0.7 imgsz_height:=480 namespace:=kicker_02
      "

  isaac_sim:
    image: nvcr.io/nvidia/isaac-sim:4.2.0
    entrypoint: bash
    stdin_open: true
    tty: true
    environment:
      # For omniverse EULA
      ACCEPT_EULA: Y
      PRIVACY_CONSENT: Y
      #For activating ros humble bridge
      ROS_DISTRO: humble
      #FASTRTPS_DEFAULT_PROFILES_FILE: /workspace/humble_ws/fastdds.xml #this doesn't seem to be necessary in isaac_sim 4.2
      RMW_IMPLEMENTATION: rmw_fastrtps_cpp # #rmw_fastrtps_cpp if you want fastrtps, but ros_nodes uses cyclonedds right now
      LD_LIBRARY_PATH: /isaac-sim/exts/omni.isaac.ros2_bridge/humble/lib
      # Necessary for display passthrough
      DISPLAY: $DISPLAY
    network_mode: host
    volumes:
      - ./.docker_volumes/isaac_sim/cache/kit:/isaac-sim/kit/cache:rw
      - ./.docker_volumes/isaac_sim/cache/ov:/root/.cache/ov:rw
      - ./.docker_volumes/isaac_sim/cache/pip:/root/.cache/pip:rw
      - ./.docker_volumes/isaac_sim/cache/glcache:/root/.cache/nvidia/GLCache:rw
      - ./.docker_volumes/isaac_sim/cache/computecache:/root/.nv/ComputeCache:rw
      - ./.docker_volumes/isaac_sim/logs:/root/.nvidia-omniverse/logs:rw
      - ./.docker_volumes/isaac_sim/data:/root/.local/share/ov/data:rw
      - ./.docker_volumes/isaac_sim/documents:/root/Documents:rw      
      # Necessary for display passthrough
      - "/tmp/.X11-unix:/tmp/.X11-unix:rw"
      # - "./launch-profiles/${LAUNCH_PROFILE:- 'set in docker/_shared'}:/robot/launch-profile/"
      #for reaching isaac extension:
      - ./isaac_extensions:/isaac_extensions
      - ./usd:/usd
    command: ./runapp.sh -v --ext-folder /isaac_extensions --enable CamConveyor

  # cam_decompressor:
  #     build:
  #       context: compression_container  # The directory containing the Dockerfile
  #       args:
  #         BUILD_MODE: "decompress"  # Change to 'decompress' for decompression mode
  #       dockerfile: DOCKERFILE  # Optional: defaults to "Dockerfile" in the context directory
  #     # Interactive shell
  #     stdin_open: true
  #     tty: true
  #     # Networking and IPC for ROS 2
  #     network_mode: host
  #     ipc: host
  #     #Needed to display graphical applications
  #     privileged: true
  #     container_name: cam_decompressor  # Set custom container name
  #     deploy:
  #       resources:
  #         reservations:
  #           devices:
  #             - driver: nvidia
  #               count: all
  #               capabilities: [gpu]

  
  