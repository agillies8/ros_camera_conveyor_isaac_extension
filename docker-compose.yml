services:
  isaac_cam_conveyor:
    #image: agillies/ros2-cam-base
    build:
      context: .  # The directory containing the Dockerfile
      dockerfile: Dockerfile  # Optional: defaults to "Dockerfile" in the context directory
    # Interactive shell
    stdin_open: true
    tty: true
    # Networking and IPC for ROS 2
    network_mode: host
    ipc: host
    #Needed to display graphical applications
    privileged: true
    container_name: isaac_cam_conveyor  # Set custom container name
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      # Allows graphical programs in the container.
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1
      - NVIDIA_DRIVER_CAPABILITIES=all
    volumes:
      # Adds this as a ros package to ros2 workspace
      - .:/ros2_ws/src/isaac_cam_conveyor
      - ~/yolo_ros/yolo_msgs:/ros2_ws/src/yolo_msgs
      # Allows graphical programs in the container.
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ${XAUTHORITY:-$HOME/.Xauthority}:/root/.Xauthority
      # Add rosbag directory
      - ~/rosbags:/rosbags

    # working_dir: /ros2_ws
    command: >
      /bin/bash -c "
      colcon build --symlink-install &&
      source /opt/ros/humble/setup.bash &&
      source /ros2_ws/install/setup.bash && 
      ros2 launch isaac_cam_conveyor kicker_controller.launch.py
      "
  kicker_yolo_ros:
    container_name: yolo_ros  # Set custom container name
    image: yolo_ros
    # Interactive shell
    stdin_open: true
    tty: true
    #network_mode: host
    privileged: true
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    volumes:
      #Add rosbag directory
      - ~/rosbags:/rosbags
      - ~/yolo_ros:/root/ros2_ws/src
      #Allows graphical programs in the container.
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ${XAUTHORITY:-$HOME/.Xauthority}:/root/.Xauthority
    command: >
      /bin/bash -c "
      colcon build &&
      source /opt/ros/humble/setup.bash &&
      source install/setup.bash &&
      ros2 launch yolo_bringup yolo.launch.py model:=src/models/best640.pt input_image_topic:=/camera/image_raw/uncompressed threshold:=0.7 imgsz_height:=480 namespace:=kicker
      "

  kicker_1_yolo_ros:
    container_name: yolo_ros_1  # Set custom container name
    image: yolo_ros
    # Interactive shell
    stdin_open: true
    tty: true
    #network_mode: host
    privileged: true
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    volumes:
      #Add rosbag directory
      - ~/rosbags:/rosbags
      - ~/yolo_ros:/root/ros2_ws/src
      #Allows graphical programs in the container.
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ${XAUTHORITY:-$HOME/.Xauthority}:/root/.Xauthority
    command: >
      /bin/bash -c "
      colcon build &&
      source /opt/ros/humble/setup.bash &&
      source install/setup.bash &&
      ros2 launch yolo_bringup yolo.launch.py model:=src/models/best640.pt input_image_topic:=/camera_01/image_raw/uncompressed threshold:=0.7 imgsz_height:=480 namespace:=kicker_01
      "

  kicker_2_yolo_ros:
    container_name: yolo_ros_2  # Set custom container name
    image: yolo_ros
    # Interactive shell
    stdin_open: true
    tty: true
    #network_mode: host
    privileged: true
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    volumes:
      #Add rosbag directory
      - ~/rosbags:/rosbags
      - ~/yolo_ros:/root/ros2_ws/src
      #Allows graphical programs in the container.
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ${XAUTHORITY:-$HOME/.Xauthority}:/root/.Xauthority
    command: >
      /bin/bash -c "
      colcon build &&
      source /opt/ros/humble/setup.bash &&
      source install/setup.bash &&
      ros2 launch yolo_bringup yolo.launch.py model:=src/models/best640.pt input_image_topic:=/camera_02/image_raw/uncompressed threshold:=0.7 imgsz_height:=480 namespace:=kicker_02
      "

  cam_decompressor:
      build:
        context: compression_container  # The directory containing the Dockerfile
        args:
          BUILD_MODE: "decompress"  # Change to 'decompress' for decompression mode
        dockerfile: DOCKERFILE  # Optional: defaults to "Dockerfile" in the context directory
      # Interactive shell
      stdin_open: true
      tty: true
      # Networking and IPC for ROS 2
      network_mode: host
      ipc: host
      #Needed to display graphical applications
      privileged: true
      container_name: cam_decompressor  # Set custom container name
      deploy:
        resources:
          reservations:
            devices:
              - driver: nvidia
                count: all
                capabilities: [gpu]

  
  